on:
  workflow_call:

env:
  CMAKE_BUILD_TYPE: Release

jobs:
  build_wheels:
    name: Build wheel for py${{ matrix.python-version }} ${{ matrix.os.platform_id }}
    runs-on: ${{ matrix.os.name }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

        os:
          - name: "windows-latest"
            platform: "windows"
            platform_id: "win_amd64"
            
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: |
          choco install cmake --version=3.30.3 -y
          choco install ninja --version=1.12.1 -y
          choco uninstall mingw -y
          choco install mingw --version=11.2.0 -y
          
      - name: Set up MinGW environment variables
        run: |
          echo "Setting MinGW path"
          setx PATH "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin;%PATH%"
      
      - name: Configure CMake with MinGW 11.2.0
        run: |
          cmake -B build -G Ninja ^
            -DCMAKE_C_COMPILER=C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/gcc.exe ^
            -DCMAKE_CXX_COMPILER=C:/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/g++.exe
            
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          # Set the path based on the operating system
          path: ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\AppData\\Local\\pypa\\cibuildwheel\\Cache' || '~/.cache' }}
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Convert Python version to cpXYZ
        # if: matrix.os.name == 'windows-latest'
        shell: pwsh
        run: |
          $version = "${{ matrix.python-version }}"
          $cp_version = "cp$($version -replace '\.', '')"
          Add-Content -Path $env:GITHUB_ENV -Value "python_cp_version=$cp_version"
          
      - name: Build wheels
        env:
          CIBW_PLATFORM: windows
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: AMD64
          CIBW_PROJECT_REQUIRES_PYTHON: "~=${{ matrix.python-version }}.0"
          CMAKE_GENERATOR: "Ninja"
          # CMAKE_GENERATOR: "MinGW Makefiles"
        shell: pwsh
        run: |
          # Install poetry dependencies
          C:\Users\runneradmin\.local\bin\poetry install --no-interaction --no-root --only=build
      
          # Print Python version
          C:\Users\runneradmin\.local\bin\poetry run python --version
      
          # Build wheels using cibuildwheel
          C:\Users\runneradmin\.local\bin\poetry run python -m cibuildwheel --output-dir .\wheelhouse
      
          # Inspect each .whl file in the wheelhouse directory
          Get-ChildItem -Path .\wheelhouse\*.whl | ForEach-Object {
            Write-Output "Inspecting $($_.FullName)"
            C:\Users\runneradmin\.local\bin\poetry run python -m zipfile --list $_.FullName
          }
      
          # Create the dist directory if it does not exist
          if (-not (Test-Path -Path .\dist)) {
            New-Item -Path .\dist -ItemType Directory
          }
      
          # Copy all .whl files to the dist directory
          Copy-Item -Path .\wheelhouse\*.whl -Destination .\dist\

      - name: Publish wheels (dry run)
        # if: matrix.os.name == 'windows-latest'
        shell: pwsh
        run: |
          ls -l .\dist
          C:\Users\runneradmin\.local\bin\poetry publish --dry-run --no-interaction -vvv
