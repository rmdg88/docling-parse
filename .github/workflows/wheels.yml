on:
  workflow_call:

env:
  CMAKE_BUILD_TYPE: Release

jobs:
  build_wheels:
    name: Build wheel for py${{ matrix.python-version }} ${{ matrix.os.platform_id }}
    runs-on: ${{ matrix.os.name }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

        os:
          - name: "windows-latest"
          #- name: "windows-2019"
            platform: "windows"
            platform_id: "win_amd64"
            
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        # if: matrix.os.name == 'windows-latest'
        shell: pwsh
        run: |
          choco install pkgconfiglite -y
          choco install ninja -y
          choco install cmake -y
          powershell -Command "(Invoke-WebRequest -Uri https://git.io/JnHTY -OutFile install_zlib.bat)"; ./install_zlib.bat; del install_zlib.bat
          echo "C:\Program Files\zlib\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\zlib\include" >> $env:GITHUB_PATH
          echo "C:\Program Files\zlib\lib" >> $env:GITHUB_PATH
          echo "C:\Users\runneradmin\.local\bin" >> $env:GITHUB_PATH

      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v4
        with:
          # Set the path based on the operating system
          path: ${{ runner.os == 'Windows' && 'C:\\Users\\runneradmin\\AppData\\Local\\pypa\\cibuildwheel\\Cache' || '~/.cache' }}
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Convert Python version to cpXYZ
        # if: matrix.os.name == 'windows-latest'
        shell: pwsh
        run: |
          $version = "${{ matrix.python-version }}"
          $cp_version = "cp$($version -replace '\.', '')"
          Add-Content -Path $env:GITHUB_ENV -Value "python_cp_version=$cp_version"
          
      - name: Build wheels
        env:
          CIBW_PLATFORM: windows
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: AMD64
          CIBW_PROJECT_REQUIRES_PYTHON: "~=${{ matrix.python-version }}.0"
          CMAKE_C_COMPILER: ""
          CMAKE_CXX_COMPILER: ""
          CMAKE_GENERATOR: "Visual Studio 16 2019"
          BUILD_THREADS: 2
        shell: pwsh
        run: |
          # Set up the MSVC environment for 64-bit builds
          cmd /c "\"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat\""
    
          # Install the build dependencies
          poetry install --no-interaction --no-root --only=build
    
          # Build the wheels
          poetry run python -m cibuildwheel --output-dir .\wheelhouse
    
          # Inspect the wheels
          Get-ChildItem -Path .\wheelhouse\*.whl | ForEach-Object {
            Write-Output "Inspecting $($_.FullName)"
            poetry run python -m zipfile --list $_.FullName
          }
    
          # Create the dist folder if it doesn't exist and move the wheels there
          if (-not (Test-Path -Path .\dist)) {
            New-Item -Path .\dist -ItemType Directory
          }
          Copy-Item -Path .\wheelhouse\*.whl -Destination .\dist\

      - name: Publish wheels (dry run)
        # if: matrix.os.name == 'windows-latest'
        shell: pwsh
        run: |
          ls -l .\dist
          poetry publish --dry-run --no-interaction -vvv
